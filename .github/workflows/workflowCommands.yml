name: Workflow Commands
on:
  push:
    branches: [master]
jobs:
  workflow-command-test:
    runs-on: ubuntu-latest
    env:
      MASKED_VALUE: "masked value in env var"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setting an error message
        id: set-error
        run: |
          echo "::error::This is a custom error message"
      
      - name: Setting an error message with parameters
        id: set-error-params
        run: |
          echo "::error title=Error title,file=app.js,line=2,col=7::This is a custom error message"
      
      - name: Setting a notice message with parameters
        id: set-notice-params
        run: |
          echo "::notice title=notice title,file=app.js,line=2,endLine=3,col=7::This is a custom notice message"
      
      - name: Setting a Warning message with parameters
        id: set-Warning-params
        run: |
          echo "::warning title=Warning title,file=app.js,line=2,endLine=3,col=7::This is a custom Warning message"
      - name: Grouping all messages
        id: group-msg
        run: |
          echo "::group::Group messages"
          echo "::error::error msg"
          echo "::notice::notice msg"
          echo "::warning::warning msg"
          echo "::debug::debug msg"
          echo "::endgroup::"
      
      - name: masking avalue in a log
        id: mask-log
        run: |
          echo "::log::masked value: ${MASKED_VALUE}"
          echo "::add-mask::masked value: ${MASKED_VALUE}"
          echo "::add-mask::This is the masked value in log str"

          echo "::group::masked"
          the_secret=$((RANDOM))
          echo "::add-mask::$the_secret"
          echo "secret-number=$the_secret" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"

          echo "::group::unmasked"
          the_not_secret=$((RANDOM))
          echo "::notice::This is the not masked value in log str"
          echo "not-secret-num=$the_not_secret" >> "$GITHUB_OUTPUT"

      - name: Use that secret output (protected by a mask)
        run: |
          echo "the secret number is ${{ steps.mask-log.outputs.secret-number }}"
          echo "the not secret num is ${{steps.mask-log.outputs.not-secret-num}}"
      
  generate-secret-pass-bw-jobs-wf:
    runs-on: ubuntu-latest
    outputs:
      handle: ${{ steps.gen-secret.outputs.handle }}
    steps:
      - name: spin up a secret store
        id: spinup-ss
        uses: some/secret-store@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          credentials: ${{secrets.SECRET_STORE_CREDENTIALS }}
          instance: ${{secrets.SECRET_STORE_INSTANCE}}
      - name: generate-secret
        id: gen-secret
        shell: bash
        run: |
          GENERATED_SECRET=$((RANDOM))
          echo "::group::generate secret"
          echo "::add-mask::$GENERATED_SECRET"
          SECRET_HANDLE=$((secret-store store-secret "$GENERATED_SECRET"))
          echo "handle=$SECRET_HANDLE" >> "$GITHUB_OUTPUT"
  secret-consumer:
    runs-on: ubuntu-latest
    needs: generate-secret-pass-bw-jobs-wf
    steps:
      - name: spin up a secret store
        id: spinup-ss
        uses: some/secret-store@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          credentials: ${{secrets.SECRET_STORE_CREDENTIALS }}
          instance: ${{secrets.SECRET_STORE_INSTANCE}}

      - name: use the secret
        id: use-secret
        shell: bash
        run: |
          SECRET_HANDLE=${{ needs.generate-secret-pass-bw-jobs-wf.outputs.handle }}
          RETRIEVED_SECRET=$((SECRET-STORE RETIEVE-SECRET "$SECRET_HANDLE"))
          echo "::add-mask::$RETRIEVED-SECRET"
          edho "We retieved our masked secret: $RETRIEVED_SECRET"